package main

import "testing"

func TestHasDeadlock(t *testing.T) {
	tests := []struct {
		name        string
		connections [][]int
		expected    bool
	}{
		{
			name: "one",
			connections: [][]int{
				{1},
				{2},
				{3, 4},
				{4},
				{0},
			},
			expected: true,
		},
		{
			name: "two",
			connections: [][]int{
				{1, 2, 3},
				{2, 3},
				{3},
				{},
			},
			expected: false,
		},
		{
			name: "three",
			connections: [][]int{
				{1, 6},
				{2},
				{3},
				{4},
				{5},
				{6},
				{3},
			},
			expected: true,
		},
		{
			name: "six",
			connections: [][]int{
				{1, 2},
				{2},
				{},
				{4},
				{3},
			},
			expected: true,
		},
		{
			name: "seven",
			connections: [][]int{
				{2},
				{0, 2},
				{},
				{4, 2},
				{2, 3},
			},
			expected: true,
		},
		{
			name: "eighteen",
			connections: [][]int{
				{70, 88, 74},
				{28},
				{},
				{},
				{},
				{11},
				{},
				{},
				{17},
				{32},
				{},
				{63},
				{77, 63, 34, 82},
				{},
				{49},
				{},
				{18, 33, 11},
				{22},
				{},
				{},
				{37},
				{},
				{},
				{35},
				{58, 74},
				{},
				{},
				{},
				{43, 50},
				{36},
				{},
				{},
				{},
				{},
				{94, 41},
				{28, 84},
				{},
				{94, 66, 77, 84},
				{49, 4},
				{96},
				{},
				{},
				{77, 75, 69},
				{48},
				{},
				{42},
				{73},
				{7, 23},
				{32},
				{76},
				{19, 29},
				{73, 56},
				{},
				{36},
				{},
				{16},
				{27},
				{},
				{61},
				{34, 94},
				{57, 41, 20},
				{},
				{47, 25},
				{72, 9, 92},
				{39, 28},
				{},
				{31},
				{},
				{11, 47},
				{13},
				{},
				{},
				{5, 31},
				{41},
				{},
				{90},
				{77, 24, 53, 74},
				{39},
				{31, 29},
				{},
				{63},
				{77, 82},
				{62, 75},
				{},
				{},
				{95},
				{22},
				{76},
				{38},
				{21, 17, 22},
				{},
				{69},
				{12, 6, 41},
				{},
				{33},
				{},
				{78},
				{73},
				{},
				{17},
			},
			expected: true,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			got := hasDeadlock(tc.connections)
			if tc.expected != got {
				t.Errorf("Expected %v, got %v", tc.expected, got)
			}
		})
	}
}
